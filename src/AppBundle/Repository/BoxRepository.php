<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;

/**
 * BoxRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BoxRepository extends \Doctrine\ORM\EntityRepository
{
    public function findAllWithType()
    {
        $query = $this->createQueryBuilder('b')
            ->leftJoin('b.type', 't')
                ->addSelect('t')
            ->leftJoin('b.project', 'p')
                ->addSelect('p')
            ->orderBy('b.project', 'ASC')
            ->addOrderBy('b.boxLetter', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    public function findAllAuthorizedForCurrentUserWithType(User $user)
    {
        $query = $this->createQueryBuilder('box')
            ->leftJoin('box.type', 'type')
                ->addSelect('type')
            ->leftJoin('box.project', 'project')
                ->addSelect('project')
            ->leftJoin('project.members', 'members')
                ->addSelect('members')
            ->leftJoin('project.teams', 'team')
            ->leftJoin('team.administrators', 'administrators')
            ->where('members = :user')
            ->orWhere('administrators = :user')
                ->setParameter('user', $user)
            ->orderBy('box.project', 'ASC')
            ->addOrderBy('box.boxLetter', 'ASC')
            ->getQuery();

        return $query->getResult();
    }

    public function findOneWithProjectTypeTubesStrains($box)
    {
        $query = $this->createQueryBuilder('box')
            ->leftJoin('box.project', 'project')
                ->addSelect('project')
            ->leftJoin('box.type', 'type')
                ->addSelect('type')
            ->leftJoin('box.tubes', 'tubes')
                ->addSelect('tubes')
            ->leftJoin('tubes.gmoStrain', 'g')
                ->addSelect('g')
            ->leftJoin('tubes.wildStrain', 'w')
                ->addSelect('w')
            ->where('box = :box')
            ->setParameter('box', $box)
            ->getQuery();

        return $query->getOneOrNullResult();
    }

    public function findOneWithType($box)
    {
        $query = $this->createQueryBuilder('box')
            ->leftJoin('box.type', 'type')
                ->addSelect('type')
            ->where('box = :box')
                ->setParameter('box', $box)
            ->getQuery();

        return $query->getOneOrNullResult();
    }
}
